package Task;


public class E5 {
    /**
     *
     * 1. Создайте базовый класс "Account" с полями:
     *    - accountId (уникальный идентификатор аккаунта, тип int)
     *    - ownerName (имя владельца, тип String)
     *    - balance (баланс, тип double)
     *
     *    Добавьте:
     *    - Конструктор по умолчанию
     *    - Конструктор с параметрами для всех полей
     *    - Геттеры и сеттеры для каждого поля
     *    - Метод toString для представления объекта в строковом виде
     *    - Метод withdraw(double amount), который уменьшает баланс (если достаточно средств)
     *    - Метод deposit(double amount), который увеличивает баланс
     *
     * 2. Создайте класс "SavingsAccount", который наследуется от "Account", и добавьте:
     *    - interestRate (процентная ставка, тип double)
     *
     *    Добавьте:
     *    - Конструктор по умолчанию
     *    - Конструктор с параметрами для всех полей, включая поля базового класса
     *    - Геттеры и сеттеры для поля interestRate
     *    - Метод applyInterest(), который добавляет проценты к балансу
     *    - Переопределите метод withdraw(double amount), чтобы запретить снятие средств, если баланс станет меньше минимального уровня (например, 100.0)
     *    - Переопределите метод toString, чтобы также отображать процентную ставку
     *
     * 3. Создайте класс "CheckingAccount", который наследуется от "Account", и добавьте:
     *    - overdraftLimit (лимит перерасхода, тип double)
     *
     *    Добавьте:
     *    - Конструктор по умолчанию
     *    - Конструктор с параметрами для всех полей, включая поля базового класса
     *    - Геттеры и сеттеры для поля overdraftLimit
     *    - Переопределите метод withdraw(double amount), чтобы позволить перерасход до лимита
     *    - Переопределите метод toString, чтобы также отображать лимит перерасхода
     *
     * 4. Создайте класс "Bank" с полями:
     *    - bankName (название банка, тип String)
     *    - accounts (список аккаунтов, тип List<Account>)
     *
     *    Добавьте:
     *    - Конструктор с параметрами для всех полей
     *    - Метод addAccount(Account account) для добавления нового аккаунта в банк
     *    - Метод getAccountById(int accountId) для поиска аккаунта по идентификатору
     *    - Метод calculateTotalBalance(), который возвращает общую сумму на всех аккаунтах в банке
     *    - Метод toString для вывода списка всех аккаунтов
     *
     * 5. В основном классе создайте:
     *    - Несколько объектов "SavingsAccount" и "CheckingAccount" с различными параметрами
     *    - Объект "Bank" и добавьте в него созданные аккаунты
     *    - Проверьте работу всех методов, включая переопределение, операции снятия, пополнения, начисления процентов и перерасхода
     *    - Выведите информацию о банке и его аккаунтах в консоль
     */

}